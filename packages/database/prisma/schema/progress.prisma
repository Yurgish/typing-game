model UserLessonProgress {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId String @db.ObjectId
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  currentScreenOrder Int
  isCompleted        Boolean   @default(false)
  completedAt        DateTime?

  rawWPM            Float?
  adjustedWPM       Float?
  accuracy          Float?
  backspaces        Int?
  errors            Int?
  timeTaken         Int?
  typedCharacters   Int?
  correctCharacters Int?

  screenMetrics ScreenMetrics[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("userLessonProgress")
}

model ScreenMetrics {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  userLessonProgressId String             @db.ObjectId
  userLessonProgress   UserLessonProgress @relation(fields: [userLessonProgressId], references: [id], onDelete: Cascade)

  screenOrder Int
  screenType  LearningMode

  rawWPM            Float
  adjustedWPM       Float
  accuracy          Float
  backspaces        Int
  errors            Int
  timeTaken         Int
  typedCharacters   Int
  correctCharacters Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userLessonProgressId, screenOrder])
  @@map("screenMetrics")
}

model LessonDifficultyStats {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  userStats        UserStats?     @relation(fields: [userId], references: [userId])
  difficulty       LessonDifficulty

  lessonsCompleted  Int            @default(0)
  perfectLessons    Int            @default(0)
  highestWPM        Float          @default(0)
  highestAccuracy   Float          @default(0)

  @@unique([userId, difficulty])
}

model UserStats {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])

  totalExperience        Int     @default(0)
  currentLevel           Int     @default(1)
  xpToNextLevel          Int?

  totalLessonsCompleted  Int     @default(0) // Still useful for overall count
  totalPerfectLessons    Int     @default(0)
  highestOverallWPM      Float   @default(0)
  highestOverallAccuracy Float   @default(0)

  currentStreak Int @default(0)
  longestStreak Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  difficultyStats LessonDifficultyStats[]
}

model UserAchievement {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
}

model UserDailyActivity {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String
  date             DateTime
  lessonsCompleted Int      @default(0)
  screensCompleted Int      @default(0)
  xpEarnedToday    Int      @default(0)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}

model CharacterMetric {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  character    String
  correctCount Int    @default(0)
  errorCount   Int    @default(0)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, character])
}
